#! /usr/bin/python
import sys
import os
from syscalls import syscalls

def print_header(file):
    file.write("// This file was auto generated by make_syscalls.py\n\n")

def write_usfs_syscall_header(file):
    print_header(file)
    file.write("#ifndef USFS_SYSCALL_H\n")
    file.write("#define USFS_SYSCALL_H\n\n")
    file.write("#include <sys/types.h>\n\n")
    for func in syscalls.items():
        file.write("typedef {} (*{}_t)(".format(func[1][0], func[0]))
        length = len(func[1])
        for i in range(length - 2):
            file.write("{}, ".format(func[1][i+1]))
        file.write("{});\n".format(func[1][length-1]))
    file.write("\n")
    for func in syscalls.items():
        file.write("extern {}_t sys_{};\n".format(func[0], func[0]))
    file.write("\n")
    file.write("#endif // USFS_SYSCALL_H\n")


def use_syscall(file):
    print_header(file)
    file.write("#include <sys/syscall.h>\n\n")
    for func in syscalls.items():
        file.write("static {} _sys_{}(".format(func[1][0], func[0]))
        length = len(func[1])
        for i in range(length - 2):
            file.write("{} _{}, ".format(func[1][i+1], i))
        file.write("{} _{}) {{\n".format(func[1][length-1], length-2))
        file.write("    syscall(SYS_{}".format(func[0]))
        for i in range(length - 2):
            file.write(", _{}".format(i))
        file.write(", _{});\n}}\n".format(length - 2))
        file.write("{}_t sys_{} = &_sys_{};\n\n".format(func[0], func[0], func[0]))
    
def use_dlysm_next(file):
    print_header(file)
    file.write("#include \"usfs/usfs.h\"\n")
    file.write("#include \"usfs/syscall.h\"\n")
    file.write("#include <assert.h>\n")
    file.write("#include <dlfcn.h>\n\n")
    for funcs in syscalls.items():
        file.write("{}_t sys_{};\n".format(funcs[0], funcs[0]))
    file.write("\n")
    file.write("__CTOR_(101) static void create_sys_syms() {\n")
    for funcs in syscalls.items():
        file.write("    sys_{} = dlsym(RTLD_NEXT, \"{}\");\n".format(funcs[0], funcs[0]))
        file.write("    assert(sys_{} && \"couldn't find sym\");\n".format(funcs[0]))
    file.write("}\n")

def has_syscall():
    if (os.path.exists("/usr/include/syscall.h")):
        return True
    return os.path.exists("/usr/local/include/syscall.h")

def main():
    header = open(sys.argv[1], "w+")
    src = open(sys.argv[2], "w+")
    write_usfs_syscall_header(header)
    header.close()
    if has_syscall():
        use_syscall(src)
    else:
        use_dlysm_next(src)
    src.close()

if __name__ == "__main__":
    main()
